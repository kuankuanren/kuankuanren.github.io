<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>为何写博客</title>
    <link href="/2021/03/27/%E4%B8%BA%E4%BD%95%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/27/%E4%B8%BA%E4%BD%95%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>书写的过程是思考的过程，将自己的思考变成文字。<br>学着分享知识，哪怕这个知识自己觉得微不足道，或许也能帮助到别的人。<br>拓宽自己的领域，不仅仅局限于技术，也可以写生活，经济，社会等。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>写作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为何写博客</title>
    <link href="/2021/03/27/%E6%96%87%E5%AD%97%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8%E7%9A%84opencv%E5%87%BD%E6%95%B0/"/>
    <url>/2021/03/27/%E6%96%87%E5%AD%97%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8%E7%9A%84opencv%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-连通域"><a href="#1-连通域" class="headerlink" title="1.连通域"></a>1.连通域</h3><ul><li>连通域一般是指图像中具有相同像素值且位置相邻的前景像素点组成的图像区域。</li></ul><h3 id="1-1连通域分析"><a href="#1-1连通域分析" class="headerlink" title="1.1连通域分析"></a>1.1连通域分析</h3><ul><li>扫描二值图像的每个像素点，对于像素值相同而且相互连通的分为相同的组，最终得到图像中所有的像素连通组件。</li></ul><h3 id="1-2连通域处理函数"><a href="#1-2连通域处理函数" class="headerlink" title="1.2连通域处理函数"></a>1.2连通域处理函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lables_num, lables = cv2.connectedComponents(image, connectivity, ltype)<br></code></pre></td></tr></table></figure><ul><li><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><ul><li>image: 输入单通道二值图像</li><li>connectivity: 取值 8 || 4，采用8连通或者4连通进行分析</li><li>ltype：输出图像的label类型，CV_32S 和 CV_16U 被支持</li></ul></li><li><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><ul><li>lables_num:所有连通域的数目</li><li>labels:图像上每一个像素的标记，用数字0，1，2，3，4..表示，不同数字表示不同的连通域，0表示背景</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">labels_num, labels, stats, centroids = cv2.connectedComponentsWithStats(image, connectivity, ltype)<br></code></pre></td></tr></table></figure><ul><li><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><ul><li>image: 输入单通道二值图像</li><li>connectivity: 取值 8 || 4，采用8连通或者4连通进行分析</li><li>ltype：输出图像的label类型，CV_32S 和 CV_16U 被支持</li></ul></li><li><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><ul><li>lables_num:所有连通域的数目</li><li>labels:图像上每一个像素的标记，用数字0，1，2，3，4..表示，不同数字表示不同的连通域，0表示背景</li><li>stats:存储每个连通组件的外界矩形信息，包括左上角坐标X,左上角坐标Y，外界矩形宽度width，外界矩形的高度height，面积</li><li>centroids：连通域的中心点坐标。</li></ul></li></ul><h3 id="2-轮廓检测"><a href="#2-轮廓检测" class="headerlink" title="2.轮廓检测"></a>2.轮廓检测</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">cv2.findContours(image, mode, <span class="hljs-function"><span class="hljs-keyword">method</span>, )</span><br></code></pre></td></tr></table></figure><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><ul><li><p>image: 单通道二值化图像</p></li><li><p>第二个参数表示轮廓的检索模式：</p><p>    - cv2.RETR_EXTERNAL 表示只检测外轮廓</p><ul><li>cv2.RETR_LIST 检测的轮廓不建立等级关系</li><li> cv2.RETR_CCOMP 建立两个等级的轮廓，上面的一层为外边界，里面的一层为内孔的边界信息。如果内孔内还有一个连通物体，这个物体的边界也在顶层。</li><li> cv2.RETR_TREE 建立一个等级树结构的轮廓</li></ul></li><li><p>第三个参数method为轮廓的近似办法</p><ul><li>cv2.CHAIN_APPROX_NONE存储所有的轮廓点，相邻的两个点的像素位置差不超过1，即max（abs（x1-x2），abs（y2-y1））==1</li><li>cv2.CHAIN_APPROX_SIMPLE压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标，例如一个矩形轮廓只需4个点来保存轮廓信息</li><li>cv2.CHAIN_APPROX_TC89_L1，CV_CHAIN_APPROX_TC89_KCOS使用teh-Chinl chain 近似算法</li></ul></li></ul><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><ul><li>一个是轮廓本身，还有一个是每条轮廓对应的属性<h3 id="3-最小外界矩形获取"><a href="#3-最小外界矩形获取" class="headerlink" title="3.最小外界矩形获取"></a>3.最小外界矩形获取</h3></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">rect</span> = cv2.minAreaRect(points)<br></code></pre></td></tr></table></figure><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><ul><li>points: Input vector of 2D points，2维点阵</li><li>points可以利用轮廓检测获得，也可以利用连通域分析求得连通域，然后得到连通域内的所有点<h4 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h4></li><li>rect:    (center(x, y), (width, height), angle of rotation)<h3 id="4-从最小外接矩形获取box"><a href="#4-从最小外接矩形获取box" class="headerlink" title="4.从最小外接矩形获取box"></a>4.从最小外接矩形获取box</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">bbox</span> = cv2.boxPoints(rect)<br></code></pre></td></tr></table></figure></li></ul><h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><ul><li>rect：cv2.minAreaRect()的输出</li></ul><h4 id="output-3"><a href="#output-3" class="headerlink" title="output"></a>output</h4><ul><li>bbox:矩形的四个点的坐标</li></ul>]]></content>
    
    
    <categories>
      
      <category>opencv</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字检测</tag>
      
      <tag>opencv</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
